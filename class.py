# -*- coding: utf-8 -*-
"""class.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vUyLQk6pqgur_f2pdyiVTWuMekzJjswA
"""

class Bike:
  pass

"""Write a program to illustrate class defination and accessing class members"""

class Myclass:
  cl_var=100
  def my_fun(self,obx):
    self.obx=obx
  def display(self):
    print("Value= ",self.obx)
myobj=Myclass()
print("Using class name ",Myclass.cl_var)
print("Using object name ",myobj.cl_var)
Myclass.cl_var=200
print("After updation Using class name ",Myclass.cl_var)
print("After updation Using object name ",myobj.cl_var)
val= int(input("Enter the value"))
myobj.my_fun(val)
myobj.display()
Myclass.my_fun(myobj,val+67)

Myclass.display(myobj)





"""### Default constructor and parametrize constructor"""

class Stud:
  def __init__(self):
    print("this is the default constructor")
obj= Stud()


class Bike:
  def __init__(self,n,y):
    self.name=n
    self.year=y
  def display(self):
    print("The model name of the bike is: ",self.name)
    print("The year of the model of bike is: ",self.year)
s=input("enter the model name of bike")
t=int(input("enter year"))
bike= Bike("honda",2013)
bike2= Bike(s,t)
bike2.display()
bike.display()

"""## Destructor"""

class Mycls:
  def __init__(self):
    print("inside default constructor")
  def __del__(self):
    print("Destructing object")
muobj=Mycls()

"""# Rectangle area and perimeter"""

class Rectangle:
  def __init__(self,l,b):
    self.length=l
    self.breadth=b
  def area(self):
    print("Area of the rectangle is: ",self.length*self.breadth)
  def perimeter(self):
    print("Perimeter of the rectangle is: ",2*(self.length+self.breadth))
rect=Rectangle(3,4)
rect.area()
rect.perimeter()
Rectangle.area(rect)

"""# **Program 4**"""

class Numbers:
  MULTIPLIYER=45
  def __init__(self,x,y):
    self.x=x
    self.y=y
  def add(self):
    return self.x+self.y
  @classmethod
  def multiply(cls,a):
    return a*cls.MULTIPLIYER
  @staticmethod
  def subtract(b,c):
    return b-c
  def value(self):
    return self.x,self.y
m=int(input("enter multipliyer: "))
Numbers.MULTIPLIYER= m
f1=int(input("Enter the value of x: "))
f2=int(input("Enter the value of y: "))
number=Numbers(f1,f2)
print("Sum", number.add())
a=int(input("Enter the value of a: "))
print("Product: ", number.multiply(a))
b=int(input("Enter the value of b: "))
c=int(input("Enter the value of c: "))
print("Subtract: ", number.subtract(b,c))
val=number.value()
print("pair: ",val)
print("pair: ",number.value())

"""## **Program 5**"""

class Student:
  def __init__(self,name,rollno):
    self.name=name
    self.rollno=rollno
    self.marks=[]
  def setmarks(self):
    m=input("Enter the marks of three subjects")
    m=m.split()
    marks=[ int(i) for i in m]
    self.marks=marks
  def compute(self):
    sum=0
    for m1 in self.marks:
      sum+=m1
    print("The total matks of three subjects: ",sum)
    print("The average marks of 3 subjects: ",sum/len(self.marks))
  def display(self):
    print("Rol no.: ",self.rollno)
    print("Name: ",self.name)
    print("Marks: ",self.marks)
r=int(input("Enter the roll no."))
n=input("Enter the name")
s=Student(r,n)
s.setmarks()
s.compute()
s.display()

set_marks=[]
marks=[]
m1=int(input("Enter the marks of 1st subject: "))
m2=int(input("Enter the marks of 2nd subject: "))
m3=int(input("Enter the marks of 3rd subject: "))
m=input("Enter the marks of 3  subjects: ")
marks=m.split(" ")

print(marks)

set_marks.append(m1)
set_marks.append(m2)
set_marks.append(m3)
print(set_marks)

class Bike:
  name=""
  gear= 0

class Employee():
  name ="shreyansh"
  age=24
  salary=30000

class Myclass:

  x=5

#Pracxtical1: Write a program to show default constructor
class Employee():
  name ="shreyansh"
  age=24
  salary=30000
p1=Employee()
print(p1.name)
print(p1.age)
print(p1.salary)

#WAP to illustrate class defination and class members
class Bike:
  def __init__(self,m,y):
    self.model=m
    self.year=y
bike1=Bike("honda",2016)
print(bike1.model)
print(bike1.year)

"""CIRCLE"""

class Circle():
  def __init__(self,r):
    self.radius= r
  def area(self):
    return self.radius**2*3.14
  def perimeter(self):
    return self.radius*2*3.14
NewCircle= Circle(6)
print(NewCircle.area())
print(NewCircle.perimeter())

"""PRACTICAL3: Create a python class named rectangle constructed by length and width"""

class Rectangle():
  def __init__(self,l,b):
    self.length= l
    self.breadth= b
  def area(self):
    return self.length*self.breadth
  def perimeter(self):
    return 2*(self.length+self.breadth)
NewRect=Rectangle(3,9)
print(NewRect.area())
print(NewRect.perimeter())

"""PARAMETRIZE CONSTRUCTOR"""

#practical1: Write a program to show parametrize constructor
class Stud:

  def __init__(self,n,rol,gen):
    self.name = n
    self.rollno = rol
    self.gender = gen
student= Stud("Barkha",34,"female")
print(student.name)
print(student.rollno)
print(student.gender)

"""DESTRUCTOR"""

#practical 2: Write a program to implement destructor
class Employee:
  def __init__(self):
    print("Employee created")
  def __init__(self):
    print("Destructor called, Employee deleted")

obj=Employee()
del obj

"""PRACTICAL4: Create a class called Numbers which has a single class attribute called MULTIPLIYER and a constructor which takes the parameters x and y"""

class Numbers:
  multiplyer=6
  def __init__(self,x,y):
    self.x = x
    self.y = y
  def add(self):
    print(self.x + self.y)
  @classmethod
  def MULTIPLIYER(cls,a):
    print(cls. multiplyer*a)

product=Numbers(3,5)
product.add()
product.MULTIPLIYER(5)

"""Program to show the formating and calling of** different types of methods**"""

class Student:
  school_name= "ABC_School"
  def __init__(self,name,age):
    self.name=name
    self.age=age
  def show(self):
    print(self.name,self.age,Student.school_name)
  @classmethod
  def change_School(cls,name):
    cls.school_name= name
    print(cls.school_name)
  @staticmethod
  def find_notes(subject_name):
    return["chapter1","chapter2","chapter3"]
    #calling instance method using object
jessa= Student("Jessa",13)
jessa.show()
#calling instance method using class
'''Studen))'''
#call class method using class
Student.change_School("XYZ_School")
#call class method using object
jessa.change_School("PQR_School")
#call static method using class
Student.find_notes("maths")

"""Program to write class variable and instance variable"""

class Car:
  wheels = 4 #class variable
  def __init__(self,name):
    self.name=name
mercedes = Car("mercedes")
print(mercedes.wheels)
print(mercedes.name)

"""Encapsulation code"""

class Super:
  def __init__(self):
    self._value1=20  #protected member
    self.__value2=57  #private member
  def display(self):
    print(self._value1)
    print(self.__value2)
class Sub:
  def show(self):
    print(self._value1)
    print(self.__value2)
obj= Sub()
obj.Show()

"""PROGRAM 6
Create a class Employee that keeps a track of number of employees in an organization and also stores their name designation and salary details



*   Write a method called get data to take input
*   Write a method called average to find average salary of all the employees in an organisation


*   Write a method called display to print all information of employe






"""

class Employee:

    # class variable to keep track of the number of employees in the organization
    num_employees = 0

    def __init__(self, name, designation, salary):
        self.name = name
        self.designation = designation
        self.salary = salary
        Employee.num_employees += 1

    @classmethod
    def get_data(cls):
        name = input("Enter name: ")
        designation = input("Enter designation: ")
        salary = float(input("Enter salary: "))
        return cls(name, designation, salary)

    @classmethod
    def average(cls, employees):
        total_salary = sum([emp.salary for emp in employees])
        return total_salary / len(employees)

    def display(self):
        print("Name:", self.name)
        print("Designation:", self.designation)
        print("Salary:", self.salary)
        print("Total Employees:", Employee.num_employees)
# create employees
emp1 = Employee("John Doe", "Manager", 50000)
emp2 = Employee("Jane Smith", "Engineer", 40000)
emp3 = Employee.get_data()

# call display method on each employee
emp1.display()
emp2.display()
emp3.display()

# calculate and print the average salary of all employees
employees = [emp1, emp2, emp3]
avg_salary = Employee.average(employees)
print("Average Salary:", avg_salary)

class Employee:
  count=0
  def __init__(self,name,designation,salary):
    Employee.count+=1
    self.name=name
    self.designation=designation
    self.salary=salary

  def get_data(self):
    print("Name: ",self.name)
    print("Designation: ",self.designation)
    print("Salary: ",self.salary)
    print("Number of employees: ",Employee.count)
  @staticmethod
  def average(mylist):
    sum1=0
    for i in mylist:
      sum1+=i.salary
      return sum1/Employee.count
Emplist=[]
num=int(input("Enter number of employees"))
for e in range(num):
  e=Employee("shrey","ceo",56677)
  Emplist.append(e)
  e.get_data()
for e in Emplist:
  e.display()
print("average salary: ",Employee.average(Emplist))

"""PROGRAM 7:
Create a python class naamed Circle constructed by a radius. Use a class variable to define value of constant PI


*   Write 2 methods to be named as area and circumference to compute the area and circumference of circle respectively by using class variable PI
*   Write a method called display to print area and perimeter
"""

class Circle:
  pi=3.1415
  def __init__(self,r):
    self.radius=r
  def area(self):
    a= Circle.pi *(self.radius)**2
    print("Area of the circle is ",a)
  def circumference(self):
    peri=2*Circle.pi*self.radius
  def display(self):
    print("Area= ",self.area(aaz)
    print("Perimeter= ",round(self.circumference(),2))
r=float(input("Enter radius of circle"))
c=Circle(r)
c.display()

2*3**3

